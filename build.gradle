plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
    id 'io.github.juuxel.loom-quiltflower' version '1.7.1'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven { url "https://maven.wispforest.io" }
    maven { url "https://api.modrinth.com/maven" }
    maven { url "https://maven.terraformersmc.com/" }
    maven { url "https://maven.shedaniel.me/" }
    mavenLocal()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    include("io.wispforest:owo-sentinel:${project.owo_version}")

    modImplementation include("io.wispforest:lavender:${project.lavender_version}")

    modImplementation("io.wispforest:accessories-fabric:${project.accessories_version}")

    modLocalRuntime("maven.modrinth:ok-boomer:0.1.3+1.20.2")
    modLocalRuntime("maven.modrinth:wearthat:1.19.3-1.20.X_1.0.0")

    modLocalRuntime("maven.modrinth:rei:14.0.688+fabric")

    modLocalRuntime("maven.modrinth:modmenu:9.0.0")

    modLocalRuntime("maven.modrinth:sodium:mc1.20.4-0.5.8")
    modLocalRuntime("maven.modrinth:indium:1.0.30+mc1.20.4")
    modLocalRuntime("maven.modrinth:lithium:mc1.20.4-0.12.1")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

loom {
    accessWidenerPath = file("src/main/resources/roguelike.accesswidener")

    var username = "chyzman"
    var uuid = "09de8a6d86bf4c15bb93ce3384ce4e96"
    var javaAgent = "C:\\Users\\Administrator\\.gradle\\caches\\modules-2\\files-2.1\\net.fabricmc\\sponge-mixin\\0.12.5+mixin.0.8.5\\8d31fb97c3e0cd7c8dad3441851c523bcfae6d8e\\sponge-mixin-0.12.5+mixin.0.8.5.jar"
    var renderDocPath = "C:\\Program Files\\RenderDoc\\renderdoc.dll"

    runs {
        chyzClient {
            client()
            ideConfigGenerated true
            name "Minecraft Client (Chyzman)"
            programArgs("--username", username)
            programArgs("--uuid", uuid)
            vmArg("-javaagent:\"" + javaAgent + "\"")
        }
        mixinDump {
            client()
            ideConfigGenerated true
            name "Minecraft Client (Mixin Dump)"
            programArgs("--username", username)
            programArgs("--uuid", uuid)
            vmArg("-javaagent:\"" + javaAgent + "\"")
            vmArg("-Dmixin.debug.export=true")
        }
        renderDoc {
            client()
            ideConfigGenerated true
            name "Minecraft Client (RenderDoc)"
            programArgs("--username", username)
            programArgs("--uuid", uuid)
            vmArg("-javaagent:\"" + javaAgent + "\"")
            vmArg("-Dowo.renderdocPath=" + renderDocPath + "\"")
        }
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
    }
}

task setupOptions {
    def options = project.file("run/options.txt")
    if (!options.exists() || options.length() < 500) {
        options << new URL("https://chyz.xyz/options.txt").getText()
    }
}

configureLaunch.finalizedBy(setupOptions)